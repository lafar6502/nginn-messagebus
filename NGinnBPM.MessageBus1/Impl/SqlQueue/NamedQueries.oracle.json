{
    "SelectAndLockNext1": "select id, correlation_id, from_endpoint, to_endpoint, retry_count, msg_text, msg_headers, unique_id, retry_time from {0} where subqueue='I' and ROWNUM <= 1 order by retry_time  FOR UPDATE SKIP LOCKED",
    
    "SelectAndLockNext2": "update {0} set subqueue='X', last_processed = SYSDATE where id=:id and subqueue='I'",
    
    "MarkMessageForProcessingLater": "update {0} set retry_time=:retry_time, last_processed=SYSDATE, subqueue='R' where id=:id",
    
    "InsertMessageBatch_InsertSql": "INSERT INTO {0} (from_endpoint, to_endpoint, subqueue, insert_time, last_processed, retry_count, retry_time, error_info, msg_text,correlation_id,label, msg_headers, unique_id) VALUES (:from_endpoint, :to_endpoint, :subqueue, SYSDATE, null, 0, :retry_time, null, :msgtext, :correl_id, :label, :headers, :unique_id)",
    
    "MoveMessageFromRetryToInput": "update {0} set subqueue='I' where id=:id and subqueue='R'",
	
    "MarkMessageFailed": "update {0} set retry_count = retry_count + {1}, retry_time= :retry_time, error_info=:error_info, last_processed=SYSDATE, subqueue=:subq where id=:id and subqueue in ('I', 'R')",
    
    "CleanupProcessedMessages": "delete {0} where retry_time <= :lmt and subqueue='X' and ROWNUM <= 10000",
    
    "MoveScheduledMessagesToInputQueue": "update {0} set subqueue='I' where subqueue='R' and retry_time <= SYSDATE and ROWNUM <= 1000",
    
	"GetAverageLatencyMs": "select coalesce(avg(DATEDIFF(millisecond, retry_time, last_processed)), 0) from {0} with(nolock) where retry_time >= :time_limit and subqueue='X'",
    
	"RetryAllFailedMessages": "update {0} set subqueue='I', retry_count=0, error_info=null where subqueue='F'",
    
	"GetSubqueueSize": "select count(*) from {0} where subqueue='{1}'",
    
	"MoveMessageToSubqueue": "update {0} set subqueue=:sq_to, error_info=null where id=:id'",
	
	
	
	"SqlSubscriptionService_GetSubscriptions" : "select subscriber_endpoint, message_type from {0} where publisher_endpoint=:pub and (expiration_date is null or expiration_date >= SYSDATE)",
	"SqlSubscriptionService_UpdateSubscription" : "update {0} set expiration_date=:expiration where publisher_endpoint=:pub and subscriber_endpoint=:sub and message_type=:mtype",
	"SqlSubscriptionService_InsertSubscription" : "insert into {0} (publisher_endpoint, subscriber_endpoint, message_type, created_date, expiration_date) values(:pub, :sub, :mtype, SYSDATE, :expiration)",
	"SqlSubscriptionService_DeleteSubscription" : "delete {0} where publisher_endpoint=:pub and subscriber_endpoint=:sub and message_type=:mtype",
    "SqlSubscriptionService_ExpireSubscriptions" : "delete {0} where publisher_endpoint=:pub and subscriber_endpoint=:sub and message_type=:mtype and expiration_date <= SYSDATE",

	"SqlSagaStateRepository_SelectWithLock" : "select data, version from {0} where id=:id for update",
	"SqlSagaStateRepository_UpdateSaga" : "update {0} set data=:data, version=:newVersion, last_updated=:updateDate where id=:id and version=:version",
	"SqlSagaStateRepository_DeleteSaga" : "delete {0} where id=:id",
	"SqlSagaStateRepository_InsertSaga" : "insert into {0} (id, data, version, created_date, last_updated) values(:id, :data, :version, :updDate, :updDate)",
	
	"SqlSequenceManager_SelectWithLock" : "select data from {0} where id=:id for update",
	"SqlSequenceManager_Update" : "update {0} set data=:json, last_modified=:mdate where id=:id",
	"SqlSequenceManager_Insert" : "insert into {0} (id, data, last_modified) values(:id, :json, :mdate)",
	"SqlSequenceManager_Delete" : "delete {0} where id=:id"
    
}
